{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\parth\\\\Desktop\\\\RAYO\\\\accessible-signup\\\\src\\\\ChatBot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './ChatBot.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatBot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [userInput, setUserInput] = useState('');\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const handleUserInput = event => {\n    setUserInput(event.target.value);\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!userInput.trim()) return;\n    const newUserMessage = {\n      text: userInput,\n      author: 'user'\n    };\n    setMessages([...messages, newUserMessage]);\n    setUserInput('');\n    respondToUserInput(newUserMessage.text);\n  };\n  const respondToUserInput = input => {\n    const botResponse = {\n      text: `You said: ${input}`,\n      author: 'bot'\n    };\n    setTimeout(() => setMessages(messages => [...messages, botResponse]), 500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cb-chatbot\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cb-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cb-message cb-${message.author}`,\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"cb-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"cb-input\",\n        type: \"text\",\n        value: userInput,\n        onChange: handleUserInput,\n        placeholder: \"Ask me something...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"cb-button\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatBot, \"a9NavnWICb4yaDxbWN1at5FwvBg=\");\n_c = ChatBot;\nexport default ChatBot;\nvar _c;\n$RefreshReg$(_c, \"ChatBot\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","ChatBot","_s","messages","setMessages","userInput","setUserInput","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleUserInput","event","target","value","handleSubmit","preventDefault","trim","newUserMessage","text","author","respondToUserInput","input","botResponse","setTimeout","className","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/parth/Desktop/RAYO/accessible-signup/src/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './ChatBot.css';\r\n\r\nfunction ChatBot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [userInput, setUserInput] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  const handleUserInput = (event) => {\r\n    setUserInput(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (!userInput.trim()) return;\r\n\r\n    const newUserMessage = {\r\n      text: userInput,\r\n      author: 'user',\r\n    };\r\n\r\n    setMessages([...messages, newUserMessage]);\r\n    setUserInput('');\r\n    respondToUserInput(newUserMessage.text);\r\n  };\r\n\r\n  const respondToUserInput = (input) => {\r\n    const botResponse = {\r\n      text: `You said: ${input}`,\r\n      author: 'bot',\r\n    };\r\n\r\n    setTimeout(() => setMessages(messages => [...messages, botResponse]), 500);\r\n  };\r\n\r\n  return (\r\n    <div className=\"cb-chatbot\">\r\n      <div className=\"cb-messages\">\r\n        {messages.map((message, index) => (\r\n          <div key={index} className={`cb-message cb-${message.author}`}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <form onSubmit={handleSubmit} className=\"cb-form\">\r\n        <input\r\n          className=\"cb-input\"\r\n          type=\"text\"\r\n          value={userInput}\r\n          onChange={handleUserInput}\r\n          placeholder=\"Ask me something...\"\r\n        />\r\n        <button type=\"submit\" className=\"cb-button\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatBot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}